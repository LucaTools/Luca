name: Publish release

on:
  push:
    tags:
      - '*'

env:
  TOOL_NAME: Luca
  XCODE_VERSION: 16.4.0 # Keep aligned with other workflows

jobs:
  build-macos:
    name: Build macOS universal binary
    runs-on: macos-15
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history and tags
        
      - name: Select Xcode
        uses: ./.github/actions/select-xcode
      
      - name: Delete build artifacts
        shell: bash
        run: swift package clean

      - name: Update version in Version.swift
        run: |
          if [ -f "Sources/LucaCLI/Version.swift" ]; then
            sed -i '' 's/let value = "[^"]*"/let value = "${{ github.ref_name }}"/' Sources/LucaCLI/Version.swift
          else
            echo "No Sources/LucaCLI/Version.swift file found."
            exit 1
          fi

      - name: Build binary (arm64)
        shell: bash
        run: swift build -c release --arch arm64

      - name: Build binary (x86_64)
        shell: bash
        run: swift build -c release --arch x86_64

      - name: Create macOS universal binary
        id: create-macos-universal-binary
        shell: bash
        run: |
          set -euo pipefail
          OUT_DIR=".github/.build"
          mkdir -p "$OUT_DIR"
          UNIVERSAL_BIN="$OUT_DIR/${{ env.TOOL_NAME }}"
          lipo -create \
            -output "$UNIVERSAL_BIN" \
            .build/arm64-apple-macosx/release/${{ env.TOOL_NAME }} \
            .build/x86_64-apple-macosx/release/${{ env.TOOL_NAME }}
          chmod +x "$UNIVERSAL_BIN"
          echo "binary-folder=$OUT_DIR" >> "$GITHUB_OUTPUT"

      - name: Zip binary
        working-directory: .github/.build/
        run: zip -r ${{ env.TOOL_NAME }}-macOS.zip ${{ env.TOOL_NAME }}

      - name: Upload macOS universal binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-universal-binary
          path: ${{ steps.create-macos-universal-binary.outputs.binary-folder }}/${{ env.TOOL_NAME }}-macOS.zip
          if-no-files-found: error
    
  create-release:
    name: Create release w/ artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [ build-macos ]
    permissions:
      contents: write # Needed for release creation & asset upload
    steps:
      - name: Download macOS universal binary artifact
        id: download-macos-artifact
        uses: actions/download-artifact@v4
        with:
          name: macOS-universal-binary
          path: artifacts
  
      - name: Create GitHub Release (if not exists)
        id: create-release
        env:
          TAG_NAME: ${{ github.ref_name }}
        run: |
          set -euo pipefail
          API_URL="https://api.github.com/repos/${{ github.repository }}/releases"
          EXISTING_ID=$(curl -sSL \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "$API_URL/tags/${TAG_NAME}" | jq -r '.id // empty')
          if [ -n "$EXISTING_ID" ]; then
            echo "Release already exists with id $EXISTING_ID"
            echo "release_id=$EXISTING_ID" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          RELEASE_ID=$(curl -sSL \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "$API_URL" \
            -d '{"tag_name":"'"${TAG_NAME}"'","generate_release_notes":true}' | jq -r '.id')
          if [ -z "$RELEASE_ID" ] || [ "$RELEASE_ID" = "null" ]; then
            echo "Failed to create release" >&2
            exit 1
          fi
          echo "release_id=$RELEASE_ID" >> "$GITHUB_OUTPUT"

      - name: Upload macOS universal binary release asset
        env:
          RELEASE_ID: ${{ steps.create-release.outputs.release_id }}
        run: |
          set -euo pipefail
          FILE="artifacts/${{ env.TOOL_NAME }}-macOS.zip"
          if [ ! -f "$FILE" ]; then
            echo "Asset file not found: $FILE" >&2
            ls -R .
            exit 1
          fi
          curl -sSL \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/octet-stream" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create-release.outputs.release_id }}/assets?name=${{ env.TOOL_NAME }}-macOS.zip" \
              --data-binary @"$FILE"
